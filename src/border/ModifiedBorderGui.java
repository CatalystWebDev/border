/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModifiedBorderGui.java
 *
 * Created on Nov 22, 2012, 2:12:50 PM
 */
package border;

import java.util.*;
import java.sql.*;
import java.lang.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author deboj11
 */
public class ModifiedBorderGui extends javax.swing.JFrame {

    /** Creates new form ModifiedBorderGui */
    public ModifiedBorderGui() {
        initComponents();
    }
    mainframe nfm = new mainframe();
    double MinSup = nfm.minSup;
    double SecMinSup = nfm.SecminSup;
    String OldTable;
    String NewTable;
    Vector<String> BoldPrim = new Vector<String>();
    Vector<Double> BoldPrimSupport = new Vector<Double>();
    Vector<String> BoldDoublePrim = new Vector<String>();
    Vector<Double> BoldDoublePrimSupport = new Vector<Double>();
    Vector<String> BPrim = new Vector<String>();
    Vector<String> BDoublePrim = new Vector<String>();
    Vector<Double> BorderSupport = new Vector<Double>();//To store support of Border sets
    Vector<Double> LoldSupport = new Vector<Double>();
    Vector<Double> tmpsup = new Vector<Double>();
    Vector<String> Lwhole = new Vector<String>();//Frequent Item Set
    Vector<Double> LwholeSupport=new Vector<Double>();//Frequent Item Set Support
    Vector<String> BTriplePrim = new Vector<String>();
    Vector<String> BQuadPrim = new Vector<String>();
    Vector<String> BWholePrim = new Vector<String>();//First Border Set
    Vector<Double> BWholePrimSup =new Vector<Double>();
    Vector<String> BWholeDoublePrim = new Vector<String>();//Second Border Set
    Vector<Double> BWholeDoublePrimSup=new Vector<Double>();
    Vector<String> notFrequent=new Vector<String>();
    Vector<Double> notFrequentSupport=new Vector<Double>();
    Vector<String> L = new Vector<String>();
    Vector<String> M = new Vector<String>();
    Vector<String> B = new Vector<String>();
    Vector<String> Candidates = new Vector<String>();
    Vector<Double> CandidatesSupport = new Vector<Double>();
    Integer totalTransaction = 10;
    String delim = " ";
    Calendar c1;
    Calendar c2;
    long diff,t1,t2;
   String dataurl="jdbc:mysql://localhost:3306/deboj11";
   String uname="root";
   String pass="";
  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARM FOR SENSOR NETWORK");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Modified Border Algorithm");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Old Data");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("New Data");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("First Min. Support(%)");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Second Min. Support(%)");

        jButton1.setText("Run");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(104, 104, 104)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, 0, 89, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, 89, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))))
                        .addGap(290, 290, 290))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jLabel1)
                .addContainerGap(248, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addGap(240, 240, 240))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("OUTPUT");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setText("Time Required");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText("First Border Set");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setText("Second Border Set");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText("Frequent Set");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:

    jComboBox1.addItem(nfm.table);
    jComboBox1.setEnabled(false);
    jTextField1.setText(Double.toString(nfm.minSup));
    jTextField1.setEditable(false);
    jTextField2.setText(Double.toString(nfm.SecminSup));
    jTextField2.setEditable(false);
    
    Connection conn = null;
    try {
        Class.forName("com.mysql.jdbc.Driver");//Register Driver
        conn = DriverManager.getConnection(dataurl,uname,pass);//Open Database Connection
        DatabaseMetaData dbm = conn.getMetaData();

        /* DISPLAYING LIST OF TABLES */
        String[] types = {"TABLE"};
        ResultSet rs = dbm.getTables(null, null, "%", types);
        while (rs.next()) {
            String table = rs.getString("TABLE_NAME");
            jComboBox2.addItem(table);
        }
        rs.close();
        conn.close();

    } catch (ClassNotFoundException ex) {
        Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException se) {
        se.printStackTrace();//Handles Error For Jdbc
    }


}//GEN-LAST:event_formWindowOpened

private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
// TODO add your handling code here:
//Recieve Variable
OldTable=jComboBox1.getSelectedItem().toString();
NewTable=jComboBox2.getSelectedItem().toString();
MinSup=Double.parseDouble(jTextField1.getText());
SecMinSup=Double.parseDouble(jTextField2.getText());
//Initialize all the DropDown ComboBox
jComboBox3.removeAllItems();
jComboBox4.removeAllItems();
jComboBox5.removeAllItems();
//Call The ModifiedBorder process Methond
ModifiedBorderProcess();
for(int i=0;i<BWholePrim.size();i++){
jComboBox3.addItem(BWholePrim.get(i));
}

for(int i=0;i<BWholeDoublePrim.size();i++){
jComboBox4.addItem(BWholeDoublePrim.get(i));
}
for(int i=0;i<Lwhole.size();i++){
jComboBox5.addItem(Lwhole.get(i));
}
jTextField3.setText(Long.toString(diff));
}//GEN-LAST:event_jButton1MouseClicked
/**********************************************************************************************************
      Method Name:ModifiedBorderProcess
     *Purpose:Process all the the Modified Border Algorithm
     *Return Type:None
     *Parameters:None
     *Other Method Used: CalculateBoldprimBdoubleprim();CalculateSupport();
 *                        CalculateBPrim(); CalculateBDoublePrim(); CalculateLwhole(); CalculateBTriplePrim();
 *                        CalculateBQuadPrim();CalculateBwholeDoublePrim(); UpdateLwholeBwhole();
**************************************************************************************************************/ 
private void ModifiedBorderProcess()
{
 CalculateBoldprimBdoubleprim();
  t1=c1.getInstance().getTimeInMillis();
 CalculateSupport();
 CalculateBPrim();
 CalculateBDoublePrim();
 CalculateLwhole();
 CalculateBTriplePrim();
 CalculateBQuadPrim();
 UpdateLwholeBwhole();
 t2=c2.getInstance().getTimeInMillis();
 diff=t2-t1;
}
    /************************************************************************
     * Method Name  : CalculateBoldprimBdoubleprim
     * Purpose      : Generate BoldPrim AND BoldDoublePrim
     * Parameters   : None
     * Return       : None
     *************************************************************************/
    private void CalculateBoldprimBdoubleprim() {
        double tmpsup;
        for (int i = 0; i < nfm.BorderSet.size(); i++) {
            tmpsup = nfm.bsup.get(i) / 5.0;
            if (tmpsup >= SecMinSup && tmpsup < MinSup) {
                BoldPrim.add(nfm.BorderSet.get(i));
                BoldPrimSupport.add(nfm.bsup.get(i));
                
            } else if (tmpsup < SecMinSup) {
                BoldDoublePrim.add(nfm.BorderSet.get(i));
                BoldDoublePrimSupport.add(nfm.bsup.get(i));
            }
        }
    }
    /************************************************************************
     * Method Name  : CalculateSupport()
     * Purpose      : Update Support of BoldPrim,BoldDoublePrim, Lold
     * Parameters   : None
     * Return       : None
     * Other Method used:Support()
     *************************************************************************/
    private void CalculateSupport() {
        Support(BoldPrim, BoldPrimSupport);
        BoldPrimSupport.clear();
        BoldPrimSupport.addAll(tmpsup);
        tmpsup.clear();
        Support(BoldDoublePrim, BoldDoublePrimSupport);
        BoldDoublePrimSupport.clear();
        BoldDoublePrimSupport.addAll(tmpsup);
        tmpsup.clear();
        Support(nfm.PfrequentCandidates, nfm.fsup);
        LoldSupport.addAll(tmpsup);
        tmpsup.clear();
    }
    /************************************************************************
     * Method Name  : CalculateBPrim()
     * Purpose      : Calculate BPrim
     * Parameters   : None
     * Return       : None
     * Other Method used:None
     *************************************************************************/
    private void CalculateBPrim() {
        for (int i = 0; i < BoldPrim.size(); i++) {
            if (BoldPrimSupport.get(i) >= MinSup) {
                BPrim.add(BoldPrim.get(i));
                Lwhole.add(BoldPrim.get(i));
                LwholeSupport.add(BoldPrimSupport.get(i));
            }
        }
    }
    /************************************************************************
     * Method Name  : CalculateBDoublePrim()
     * Purpose      : Calculate BDoublePrim
     * Parameters   : None
     * Return       : None
     * Other Method used:None
     *************************************************************************/
    private void CalculateBDoublePrim() {
        for (int i = 0; i < BoldDoublePrim.size(); i++) {
            if (BoldDoublePrimSupport.get(i) >= MinSup) {
                BDoublePrim.add(BoldDoublePrim.get(i));
                Lwhole.add(BoldDoublePrim.get(i));
                LwholeSupport.add(BoldDoublePrimSupport.get(i));
            }
  
        }
    }

    private void CalculateLwhole() {
        for (int i = 0; i < nfm.PfrequentCandidates.size(); i++) {
            if (LoldSupport.get(i) >= MinSup) {
                Lwhole.add(nfm.PfrequentCandidates.get(i));
                LwholeSupport.add(LoldSupport.get(i));
            } 
        }
    }

    private void CalculateBTriplePrim() {
        for (int i = 0; i < BoldDoublePrim.size(); i++) {
            if ((BoldDoublePrimSupport.get(i) >= SecMinSup) && (BoldDoublePrimSupport.get(i) < MinSup)) {
                BTriplePrim.add(BoldDoublePrim.get(i));
            }
            else if(BoldDoublePrimSupport.get(i)< SecMinSup){
                 BWholeDoublePrim.add(BoldDoublePrim.get(i));
                 BWholeDoublePrimSup.add(BoldDoublePrimSupport.get(i));
            }

        }
    }

    private void CalculateBQuadPrim() {
        for (int i = 0; i < BoldPrim.size(); i++) {
            if ((BoldPrimSupport.get(i) >= SecMinSup) && (BoldPrimSupport.get(i) < MinSup)) {
                BQuadPrim.add(BoldPrim.get(i));
            }           
            else if(BoldPrimSupport.get(i)< SecMinSup){
                 BWholeDoublePrim.add(BoldPrim.get(i));
                 BWholeDoublePrimSup.add(BoldPrimSupport.get(i));
            }
        }//This loop for adding from Bold Single Prim
        for (int i = 0; i < nfm.PfrequentCandidates.size(); i++) {
            if ((LoldSupport.get(i) >= SecMinSup) && (LoldSupport.get(i) < MinSup)) {
                BQuadPrim.add(nfm.PfrequentCandidates.get(i));
            }
                 else if(LoldSupport.get(i)< SecMinSup){
                 BWholeDoublePrim.add(nfm.PfrequentCandidates.get(i));
                 BWholeDoublePrimSup.add(LoldSupport.get(i));
            }

        }//This loop for adding from Lold
        //This Section will Calculate BwholePrim
        BWholePrim.addAll(BTriplePrim);
        BWholePrim.addAll(BQuadPrim);
    }


    /************************************************************************
     * Method Name  : UpdateLwholeBwhole()
     * Purpose      : Generate Candidate set and update BwholePrim and BwholeDoublePrim and Lwhole
     * Parameters   : None
     * Return       : None
     * Other Method used:GenerateSizeof,  GenerateCandidates(k),  TwholeSupport(Candidates);
     *************************************************************************/
    private void UpdateLwholeBwhole() {
        Integer m = 0;
        //First Find the Maximum size of the element present in BDoublePrim
        if (!(BDoublePrim.isEmpty())) {
            for (int i = 0; i < BDoublePrim.size(); i++) {
                m = BDoublePrim.get(i).split(" ").length;
            }
        }//If Close
        Integer k = 2;
        while (!(L.isEmpty()) || !(B.isEmpty()) || k <= m + 1) {
            //Calculate L
                L.addAll(GenerateSizeof(BDoublePrim, k - 1));
                //L.addAll(GenerateSizeof(L, k-1));
                L.addAll(GenerateSizeof(BTriplePrim, k - 1));
                L.addAll(GenerateSizeof(B, k-1));
            //Calculate M
                M.addAll(GenerateSizeof(L, k-1));
                M.addAll(GenerateSizeof(Lwhole, k - 1));
                M.addAll(GenerateSizeof(BWholePrim, k - 1));
            
            //if both L and M not null then Generate Candidate
        if(!L.isEmpty() && !M.isEmpty()){
        //Generate Candidates
        GenerateCandidates(k);
        
        //CalCulate Support for Candidate Set
        TwholeSupport(Candidates);
        //Update Lk
        
        for (int t = 0; t < Candidates.size(); t++) {
            if (CandidatesSupport.get(t) >= MinSup) {
                L.add(Candidates.get(t));
            }
            //else Add to Not Frequent set to calculate Border Sets
            else{
                notFrequent.add(Candidates.get(t));
                notFrequentSupport.add(CandidatesSupport.get(t));
            }
        }
        //Lwhole=LwholeULk
        Lwhole.addAll(L);
        //Update BWholePrim and BWholeDoublePrim
        for(int i=0;i<notFrequent.size();i++){
        if((notFrequentSupport.get(i)>=SecMinSup) && (notFrequentSupport.get(i)<MinSup)){
        B.add(notFrequent.get(i));
        }
        else if(notFrequentSupport.get(i)<SecMinSup){
        BWholeDoublePrim.add(notFrequent.get(i));
        }
        }
        //Update BwholePrim
        BWholePrim.addAll(B);
        }
        L.clear();
        M.clear();
        k=k+1;//Increment K value
        }//While loop close
    }

    private void TwholeSupport(Vector<String> e) {
        StringTokenizer st; //tokenizer for candidate and transaction
        boolean match; //whether the transaction has all the items in an itemset
        double count[] = new double[e.size()]; //the number of successful matches
        Connection conn = null;
        Statement stmt = null;
        Statement stmt2 = null;

        double sup;

        try {
            Class.forName("com.mysql.jdbc.Driver");//Register Driver
            conn = DriverManager.getConnection(dataurl,uname,pass);//Open Database Connection
            stmt = conn.createStatement();
            stmt2 = conn.createStatement();
            String sql, sql2;

            sql = "SELECT * FROM t_new";
            sql2 = "SELECT * FROM t_old";
            ResultSet rs = stmt.executeQuery(sql);
            ResultSet rs2 = stmt2.executeQuery(sql2);
            //For Each Transaction
            while (rs.next()) {
                //Check Each Candidate
                for (int c = 0; c < e.size(); c++) {
                    match = false;//reset match to false
                    st = new StringTokenizer(e.get(c), delim);
                    //check each item in the itemset in the transaction if it is present 
                    while (st.hasMoreTokens()) {
                        int val = rs.getInt(st.nextToken());
                        if (val == 1) {
                            match = true;
                        } else {
                            match = false;
                        }
                        if (!match) {
                            break;
                        }
                    }
                    if (match) {
                        count[c]++;
                    }//if successful match then increment the count
                }//For loop Close 
            }//While Loop Close For each transaction
            
            //For Each Transaction
            while (rs2.next()) {
                //Check Each Candidate
                for (int c = 0; c < e.size(); c++) {
                    match = false;//reset match to false
                    st = new StringTokenizer(e.get(c), delim);
                    //check each item in the itemset in the transaction if it is present 
                    while (st.hasMoreTokens()) {
                        int val = rs.getInt(st.nextToken());
                        if (val == 1) {
                            match = true;
                        } else {
                            match = false;
                        }
                        if (!match) {
                            break;
                        }
                    }
                    if (match) {
                        count[c]++;
                    }//if successful match then increment the count
                }//For loop Close 
            }//While Loop Close For each transaction

            rs2.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();//Handles Error For Jdbc
        } catch (Exception se) {
            se.printStackTrace();//Handles Error For class.name
        }


        for (int i = 0; i < e.size(); i++) {
            //calculate support 
            sup = count[i] / (double) totalTransaction;
            //if the count% is larger than the minSup%, add to the candidate to the frequent candidates
            tmpsup.add(sup);

        }
    }

    private void GenerateCandidates(Integer n) {
        Vector<String> tempCandidates = new Vector<String>();
        String str1, str2;
        StringTokenizer st1, st2;
        if (n == 2) {
            for (int i = 0; i < L.size(); i++) {
                st1 = new StringTokenizer(L.get(i));
                str1 = st1.nextToken();
                for (int j = 0; j < M.size(); j++) {
                    st2 = new StringTokenizer(M.elementAt(j));
                    str2 = st2.nextToken();
                    if(!L.get(i).equals(M.get(j))){
                    tempCandidates.add(str1 + " " + str2);
                    }
                }
            }
            }
        else {
            for (int i = 0; i < L.size(); i++) {
                for (int j =0; j < M.size(); j++) {
                    str1 = new String();
                    str2 = new String();
                    st1 = new StringTokenizer(L.get(i), delim);
                    st2 = new StringTokenizer(M.get(j), delim);
                    if(!L.get(i).equals(M.get(j))){
                    for (int s = 0; s < n - 2; s++) {
                        str1 = str1 + " " + st1.nextToken();
                        str2 = str2 + " " + st2.nextToken();
                    }

                    if (str2.compareToIgnoreCase(str1) == 0) {
                        tempCandidates.add((str1 + " " + st1.nextToken() + " " + st2.nextToken()).trim());
                    }//if close
                }//If Condition to check if strings are equal
            }//Inner for loop
        }//outer For loop
        }
        Candidates.clear();
        Candidates = new Vector<String>(tempCandidates);
        tempCandidates.clear();
    }

    private Vector GenerateSizeof(Vector<String> v, Integer s) {
        Vector<String> tmpSizeof = new Vector<String>();
        tmpSizeof.clear();
        for (int i = 0; i < v.size(); i++) {
            if (v.get(i).split(" ").length == s) {
                tmpSizeof.add(v.get(i));
            }
        }
        return tmpSizeof;
    }

    private void Support(Vector<String> e, Vector<Double> s) {
        StringTokenizer st; //tokenizer for candidate and transaction
        boolean match; //whether the transaction has all the items in an itemset
        double count[] = new double[e.size()]; //the number of successful matches
        Connection conn = null;
        Statement stmt = null;

        double sup;

        try {
            Class.forName("com.mysql.jdbc.Driver");//Register Driver
            conn = DriverManager.getConnection(dataurl,uname,pass);//Open Database Connection
            stmt = conn.createStatement();
            String sql;

            sql = "SELECT * FROM " + NewTable;
            ResultSet rs = stmt.executeQuery(sql);
            //For Each Transaction
            while (rs.next()) {
                //Check Each Candidate
                for (int c = 0; c < e.size(); c++) {
                    match = false;//reset match to false
                    st = new StringTokenizer(e.get(c), delim);
                    //check each item in the itemset in the transaction if it is present 
                    while (st.hasMoreTokens()) {
                        int val = rs.getInt(st.nextToken());
                        if (val == 1) {
                            match = true;
                        } else {
                            match = false;
                        }
                        if (!match) {
                            break;
                        }
                    }
                    if (match) {
                        count[c]++;
                    }//if successful match then increment the count
                }//For loop Close 
            }//While Loop Close For each transaction
            rs.close();
        } catch (SQLException se) {
            se.printStackTrace();//Handles Error For Jdbc
        } catch (Exception se) {
            se.printStackTrace();//Handles Error For class.name
        }


        for (int i = 0; i < e.size(); i++) {
            //calculate support 
            sup = (count[i] + s.get(i)) / (double) totalTransaction;
            //if the count% is larger than the minSup%, add to the candidate to the frequent candidates
            tmpsup.add(sup);

        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifiedBorderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifiedBorderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifiedBorderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifiedBorderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ModifiedBorderGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
